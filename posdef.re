= おわりに

「HOW TO IMPLEMENT EXTEND SQUIRREL IMTERPRETER」をご覧いただき有難うございます。
いかがでしたでしょうか。
あとがきといっても何書いたらいいか思いつかないんで、つらつらと思いつく事について触れてみます。


== 移植性への対応

本書ではUbuntu Linux環境を前提としていて、移植性や汎用的なビルド環境への配慮がほとんどといっていいほど考慮されてません（といえば、Squirrel自体がそんな印象が拭えませんが）。
ここでいわゆるGNU Autotools/Libtool（./configure && make && make installとするあれ）に対応してみたかったです。
本まで買ったのですが難しくて、実用的なところまで学習する時間までは取れそうになかったので、見送っています。


== require時の振る舞いの整理

PHPなんかだとrequireとrequire_onceがあり、外部モジュールの読み込みにおいて、多重読み込み的な振る舞いをするものとしないもの二つの方法があります。
Rubyだとrequireと書いたらonceな仕様になるらしいです。
今回は深く考えずにonceな挙動となるようにしてまいましたが、このところをもうちょっと整理したかったです。
あるいは任意のタイミングで動的にアンリンクするような機能を作っても良かったかも。
結局インタプリタの終了処理でロードしたやつを別個にアンロードしているんで、それを呼び出すネイティブクロージャ作ればよかったのだろか。


== インタラクティブシェルとしての実装

sqeの実装はSquirrelの標準のインタプリタ／インタラクティブシェルであるところの、sqの実装を参考にしたのですが、インタラクティブシェルの機能はオミットしてしまったので、これにちゃんと対応したい。
あとは文字コードとか64bit対応とかもできていないので、一つのアプリケーションとして見た場合まだまだ完成度が低いと言わざるを得ません。
といっても、コミケ用のネタとしての実装と考えれば十分ではないかと判断した次第です。


== というわけで

というわけで、そろそろ終いにしたいと思います。ありがとうございました。@<br>{}
2014年7月某日 @kandayasu
